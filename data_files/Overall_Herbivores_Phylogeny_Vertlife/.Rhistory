Traitmetric_choices <- 'mean|sd' # Or 'sk|ku' - determines which metrics will be used in all analyses below.
toupper(gsub('\\|', '', Traitmetric_choices))
paste('AllSites_Ecometrics_Animation', toupper(gsub('\\|', '', Traitmetric_choices)), '.gif')
paste('AllSites_Ecometrics_Animation_', toupper(gsub('\\|', '', Traitmetric_choices)), '.gif', sep =
'')
paste('AllSites_Ecometrics_VoCC_', toupper(gsub('\\|', '', Traitmetric_choices)), '.gif', sep = '')
# Set up the bounds of the time bins spanning the past 7.5 million years. Organize the bins such that they each
# cover a portion of time but overlap, so that a moving average of trait measurements is established:
Fossil_timebins <- list()
Timebins_index <- 1 # Set up a counter for adding elements to "Fossil_timebins".
Timebins_shift <- 0.25 # Set up the time-shift interval from the previous to next bin.
Timebins_max <- 7.5 # Set the maximum age past which bins will no longer be established (7.5 million years).
Timebin_current_min <- 0 # Set the min age of first bin to be year 0.
Timebin_current_max <- Timebin_current_min + 0.5 # Set the max age of first bin (0.5 million years above min).
while (Timebin_current_max <= Timebins_max) { # Ensure that time bins do not exceed 7.5 million years.
Fossil_timebins[[Timebins_index]] <- c(Timebin_current_min, Timebin_current_max) # Append the current bin.
Timebins_index <- Timebins_index + 1 # Update the "Fossil_timebins" list index.
Timebin_current_min <- Timebin_current_min + Timebins_shift # Update the min of the next bin.
Timebin_current_max <- Timebin_current_max + Timebins_shift } # Update the max of the next bin.
Fossil_timebins <- rev(Fossil_timebins) # Reverse the order of "Fossil_timebins" so it goes from oldest to newest.
rm(Timebins_index, Timebins_shift, Timebins_max, Timebin_current_min, Timebin_current_max) # Remove variables.
View(Fossil_timebins)
Events <- c(7.4, 5, 3.4, 2.6, 1.9, 0.0) # Time periods, and indices for those periods on the next line.
Fossil_timebins
sapply(append(Fossil_timebins, 0), mean)
Events_breaks <- sapply(Events, function(Time) { which.min(abs(Time - sapply(append(Fossil_timebins, 0), mean))) })
Events_breaks
sqs(1,1,1,1,1)
source('../sqs.R') # For implementing the SQS approach/the "sqs" function below.
source('sqs.R') # For implementing the SQS approach/the "sqs" function below.
sqs(1,1,1,1,1)
sqs(3,3,3,3,3)
sqs(5,5,5,5,5)
sqs(20,20,20,20,20)
sqs(c(20,20,20,20,20))
sqs(c(200,200,200,200,200))
sqs(c(2,2,2,2,2))
sqs(c(3,3,3,3,3))
sqs(c(300000,300000,300000,300000,300000))
Maxlike_sampsize_spec <- 2 # This is the minimum number of species that must be included in each trait calculation.
Breaks_clim_df <- data.frame(Color = colorRampPalette('deepskyblue3', 'white')(length(Fossil_timebins) + 1))
colorRampPalette('deepskyblue3', 'white')(length(Fossil_timebins) + 1)
Breaks_clim_df <- data.frame(Color = colorRampPalette(c('deepskyblue3', 'white'))(length(Fossil_timebins) + 1))
Breaks_clim_df <- data.frame(Color = colorRampPalette(c('deepskyblue3', 'white'))(76))
Breaks_clim <- geom_segment(data = Breaks_clim_df, aes(x = Events_breaks[which(Events_IDs == 'Clim')][1], xend =
Events_breaks[which(Events_IDs == 'Clim')][2], y = -Inf, yend = Inf, color = Color), alpha = 0.3, show.legend = FALSE)
Woodycover_calculator <- function(Carbonate_measurement) { # Converts soil carbonate measurement to % woody cover.
return((sin(-1.06688 - 0:08538 * Carbonate_measurement))^2) }
Woodycover_calculator(-10.4)
sin(1)
Woodycover_calculator <- function(Carbonate_measurement) { # Converts soil carbonate measurement to % woody cover.
return((sin(-1.06688 - 0.08538 * Carbonate_measurement))^2) }
Woodycover_calculator(-10.4)
Woodycover_calculator(-4.4)
source("~/Desktop/School/Graduate School/Post-Class Years/Papers/Thesis Papers/Chapter 1/Code_and_Data/Thesis_Chapter1_V17.R", echo=TRUE)
